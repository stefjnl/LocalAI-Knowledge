@page "/search"
@using LocalAI.Web.Services
@using LocalAI.Core.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@inject IApiService ApiService
@inject IConversationService ConversationService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Knowledge Search</PageTitle>

<div class="container-fluid py-4 h-100">
    <div class="row justify-content-center h-100">
        <div class="col-lg-10 d-flex flex-column h-100">

            <div class="text-center mb-4">
                <h1 class="display-5 fw-bold text-primary">🧠 Local AI Knowledge Assistant</h1>
                <p class="lead text-muted">Search through your personal knowledge base using semantic AI</p>
            </div>

            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert @(collectionExists ? "alert-success" : "alert-warning") alert-dismissible fade show"
                    role="alert">
                    <strong>@(collectionExists ? "✅" : "⚠️")</strong> @statusMessage
                    @if (!collectionExists)
                    {
                        <button type="button" class="btn btn-sm btn-outline-primary ms-3" @onclick="ProcessDocuments"
                            disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Processing...</span>
                            }
                            else
                            {
                                <span>📚 Process Documents</span>
                            }
                        </button>
                    }
                </div>
            }

            <div class="card shadow-sm border-0 mb-4">
                <div class="card-body p-4">
                    <div class="input-group input-group-lg">
                        <span class="input-group-text bg-light border-end-0">🔍</span>
                        <input type="text" class="form-control border-start-0 ps-0"
                            placeholder="Ask anything about your knowledge base..." @bind="searchQuery"
                            @onkeypress="OnKeyPress" disabled="@isSearching" />
                        <button class="btn btn-primary px-4" type="button" @onclick="PerformSearch"
                            disabled="@(isSearching || string.IsNullOrWhiteSpace(searchQuery))">
                            @if (isSearching)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Searching...</span>
                            }
                            else
                            {
                                <span>Search</span>
                            }
                        </button>
                    </div>

                    @if (conversationHistory.Any())
                    {
                        <div class="mt-3">
                            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearConversation">
                                Clear Conversation
                            </button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(searchError))
                    {
                        <div class="alert alert-danger mt-3 mb-0" role="alert">
                            <strong>Error:</strong> @searchError
                        </div>
                    }
                </div>
            </div>

            <!-- Conversation History -->
            @if (conversationHistory.Any() || searchResponse != null)
            {
                <div class="flex-grow-1 overflow-auto mb-4" style="max-height: 60vh;">
                    <div class="card shadow-sm border-0">
                        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Conversation</h5>
                            <button class="btn btn-sm btn-light" @onclick="ClearConversation">
                                Clear
                            </button>
                        </div>
                        <div class="card-body p-0">
                            <div class="p-3">
                                @foreach (var item in conversationHistory)
                                {
                                    <div class="message user-message mb-4">
                                        <div class="d-flex">
                                            <div class="message-avatar me-3">
                                                <span class="bg-primary text-white rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 36px; height: 36px;">
                                                    👤
                                                </span>
                                            </div>
                                            <div class="message-content flex-grow-1">
                                                <div class="message-bubble bg-primary text-white p-3 rounded">
                                                    <p class="mb-0">@item.Query</p>
                                                </div>
                                                <small class="text-muted">@item.Timestamp.ToString("MMM d, h:mm tt")</small>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="message assistant-message mb-4">
                                        <div class="d-flex">
                                            <div class="message-avatar me-3">
                                                <span class="bg-success text-white rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 36px; height: 36px;">
                                                    🤖
                                                </span>
                                            </div>
                                            <div class="message-content flex-grow-1">
                                                <div class="message-bubble bg-light border p-3 rounded">
                                                    @((MarkupString)FormatResponse(item.Response))
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }

                                @if (searchResponse != null)
                                {
                                    <div class="message user-message mb-4">
                                        <div class="d-flex">
                                            <div class="message-avatar me-3">
                                                <span class="bg-primary text-white rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 36px; height: 36px;">
                                                    👤
                                                </span>
                                            </div>
                                            <div class="message-content flex-grow-1">
                                                <div class="message-bubble bg-primary text-white p-3 rounded">
                                                    <p class="mb-0">@searchResponse.Query</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="message assistant-message mb-4">
                                        <div class="d-flex">
                                            <div class="message-avatar me-3">
                                                <span class="bg-success text-white rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 36px; height: 36px;">
                                                    🤖
                                                </span>
                                            </div>
                                            <div class="message-content flex-grow-1">
                                                <div class="message-bubble bg-light border p-3 rounded">
                                                    @if (!string.IsNullOrEmpty(searchResponse.RAGResponse))
                                                    {
                                                        @((MarkupString)FormatResponse(searchResponse.RAGResponse))
                                                    }
                                                    else
                                                    {
                                                        <p class="text-muted mb-0">No response generated.</p>
                                                    }
                                                    @if (searchResponse.Timing != null && !string.IsNullOrEmpty(searchResponse.Timing.FormattedResponseTime))
                                                    {
                                                        <div class="mt-2 text-muted small">
                                                            Responded in @searchResponse.Timing.FormattedResponseTime
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Sources Section (only show when there's a response) -->
            @if (searchResponse != null && searchResponse.Sources?.Any() == true)
            {
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="mb-0">Sources (@searchResponse.Sources.Count)</h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            @foreach (var source in searchResponse.Sources)
                            {
                                <div class="col-md-6">
                                    <div class="card h-100 border-0 bg-light">
                                        <div class="card-body p-3">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <h6 class="card-title text-primary mb-0">
                                                    📄 @GetSourceName(source.Source)
                                                </h6>
                                                <span class="badge bg-primary rounded-pill">
                                                    @(((int)(source.Score * 100)).ToString())%
                                                </span>
                                            </div>
                                            @if (!string.IsNullOrEmpty(source.PageInfo))
                                            {
                                                <small class="text-muted d-block mb-2">@source.PageInfo</small>
                                            }
                                            <p class="card-text small text-muted">
                                                @if (IsSourceExpanded(source))
                                                {
                                                    @source.Content
                                                }
                                                else
                                                {
                                                    @TruncateContent(source.Content, 150)
                                                }
                                            </p>
                                            <button class="btn btn-sm btn-outline-secondary mt-2"
                                                @onclick="() => ToggleSourceExpansion(source)">
                                                @if (IsSourceExpanded(source))
                                                {
                                                    <span>⬆️ Show Less</span>
                                                }
                                                else
                                                {
                                                    <span>⬇️ Show More</span>
                                                }
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<style>
    .message {
        animation: fadeIn 0.3s ease-in;
    }

    .user-message .message-bubble {
        border-top-left-radius: 0.5rem;
        border-top-right-radius: 0.5rem;
        border-bottom-left-radius: 0.5rem;
        border-bottom-right-radius: 0;
    }

    .assistant-message .message-bubble {
        border-top-left-radius: 0.5rem;
        border-top-right-radius: 0.5rem;
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0.5rem;
    }

    .message-avatar {
        flex-shrink: 0;
    }

    .message-content {
        min-width: 0;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

@code {
    private string searchQuery = "";
    private bool isSearching = false;
    private bool isProcessing = false;
    private bool collectionExists = false;
    private string statusMessage = "";
    private string searchError = "";
    private SearchResponse? searchResponse;
    private bool isResponseExpanded = false;
    private HashSet<SearchResult> expandedSources = new HashSet<SearchResult>();
    private List<ConversationHistoryItem> conversationHistory = new List<ConversationHistoryItem>();

    protected override async Task OnInitializedAsync()
    {
        await CheckCollectionStatus();
        conversationHistory = await ConversationService.GetConversationHistoryAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (searchResponse != null)
        {
            searchQuery = "";
            searchResponse = null;
            StateHasChanged();
        }
    }

    private async Task CheckCollectionStatus()
    {
        try
        {
            var response = await ApiService.GetCollectionStatusAsync();
            if (response.Success && response.Data != null)
            {
                collectionExists = response.Data.CollectionExists;
                statusMessage = collectionExists
                ? "Knowledge base is ready! You can start searching your documents."
                : "Knowledge base not found. Process your documents first to enable search.";
            }
            else
            {
                statusMessage = "Unable to check knowledge base status. Make sure the API is running.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error checking status: {ex.Message}";
        }
    }

    private async Task ProcessDocuments()
    {
        isProcessing = true;
        try
        {
            var response = await ApiService.ProcessDocumentsAsync();
            if (response.Success && response.Data != null)
            {
                statusMessage = response.Data.Message;
                if (response.Data.Success)
                {
                    collectionExists = true;
                    statusMessage = $"✅ Successfully processed {response.Data.ChunksProcessed} document chunks!";
                }
            }
            else
            {
                statusMessage = $"Error processing documents: {response.Error}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;

        isSearching = true;
        searchError = "";
        searchResponse = null;

        try
        {
            // Get recent context for the conversation
            var context = await ConversationService.GetRecentContextAsync(3);
            
            // Perform search with context
            var response = await ApiService.SearchAsync(searchQuery.Trim(), 8, context);
            if (response.Success && response.Data != null)
            {
                searchResponse = response.Data;
                
                // Add to conversation history
                await ConversationService.AddToConversationHistoryAsync(searchQuery.Trim(), searchResponse.RAGResponse);
                
                // Refresh conversation history
                conversationHistory = await ConversationService.GetConversationHistoryAsync();
            }
            else
            {
                searchError = response.Error ?? "Unknown error occurred";
            }
        }
        catch (Exception ex)
        {
            searchError = ex.Message;
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private async Task ClearConversation()
    {
        await ConversationService.ClearConversationHistoryAsync();
        conversationHistory = new List<ConversationHistoryItem>();
        StateHasChanged(); // Force UI update
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isSearching && !string.IsNullOrWhiteSpace(searchQuery))
        {
            await PerformSearch();
        }
    }

    private string FormatResponse(string response)
    {
        return response.Replace("\n", "<br>");
    }

    private string GetSourceName(string source)
    {
        return Path.GetFileNameWithoutExtension(source);
    }

    private string TruncateContent(string content, int maxLength)
    {
        if (string.IsNullOrEmpty(content) || content.Length <= maxLength)
            return content;

        return content.Substring(0, maxLength) + "...";
    }

    private void ToggleResponseFormat()
    {
        isResponseExpanded = !isResponseExpanded;
    }

    private void ToggleSourceExpansion(SearchResult source)
    {
        if (expandedSources.Contains(source))
        {
            expandedSources.Remove(source);
        }
        else
        {
            expandedSources.Add(source);
        }
    }

    private bool IsSourceExpanded(SearchResult source)
    {
        return expandedSources.Contains(source);
    }
}
