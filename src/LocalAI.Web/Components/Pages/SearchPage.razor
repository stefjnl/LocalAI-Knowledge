@page "/search"
@using LocalAI.Web.Services
@using LocalAI.Core.Models
@using LocalAI.Web.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@inject IApiService ApiService
@inject IConversationService ConversationService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Knowledge Search</PageTitle>

<div class="claude-chat-container">
    <!-- Header -->
    <header class="chat-header">
        <div class="header-content">
            <h1 class="app-title">🧠 Local AI Knowledge Assistant</h1>
            <p class="app-subtitle">Your personal knowledge companion</p>
        </div>
    </header>

    <div class="chat-layout">
        <!-- Chat History Sidebar -->
        <div class="sidebar @(isSidebarOpen ? "open" : "")">
            <div class="sidebar-header">
                <h2>Conversations</h2>
                <button class="close-sidebar-btn" @onclick="ToggleSidebar">✕</button>
            </div>
            <div class="sidebar-content">
                <button class="new-chat-btn" @onclick="StartNewChat">
                    <span>+</span> New Chat
                </button>
                <div class="conversations-list">
                    @if (conversationsLoading)
                    {
                        <div class="loading">Loading conversations...</div>
                    }
                    else
                    {
                        @foreach (var conv in conversations)
                        {
                            <div class="conversation-item @(currentConversation?.Id == conv.Id ? "active" : "")" 
                                 @onclick="() => LoadConversation(conv.Id)">
                                <div class="conversation-title">@GetConversationTitle(conv)</div>
                                <div class="conversation-date">@conv.UpdatedAt.ToString("MMM d, h:mm tt")</div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Main Chat Area -->
        <div class="main-content">
            <!-- Sidebar Toggle Button (Mobile) -->
            <button class="sidebar-toggle" @onclick="ToggleSidebar">☰</button>

            <div class="chat-main" @ref="chatContainer">
                @if (searchError != "")
                {
                    <div class="error-banner">
                        <span class="error-icon">⚠️</span>
                        <span class="error-text">@searchError</span>
                    </div>
                }

                <!-- Conversation History -->
                <div class="messages-container">
                    @if (!conversationHistory.Any() && searchResponse == null)
                    {
                        <div class="welcome-message">
                            <div class="welcome-content">
                                <div class="welcome-icon">🧠</div>
                                <h2>Welcome to Your Knowledge Assistant</h2>
                                <p>Ask anything about your documents and I'll search through your knowledge base to find answers.
                                </p>
                                <div class="welcome-examples">
                                    <div class="example-item">"Tell me about Azure pricing models"</div>
                                    <div class="example-item">"What are the key features of .NET 9?"</div>
                                    <div class="example-item">"Summarize the main points from the LLM research papers"</div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        @foreach (var item in conversationHistory)
                        {
                            <div class="message user-message">
                                <div class="message-avatar user-avatar">
                                    <span>👤</span>
                                </div>
                                <div class="message-content">
                                    <div class="message-text">@item.Query</div>
                                    <div class="message-timestamp">@item.Timestamp.ToString("MMM d, h:mm tt")</div>
                                </div>
                            </div>
                            <div class="message assistant-message">
                                <div class="message-avatar assistant-avatar">
                                    <span>🤖</span>
                                </div>
                                <div class="message-content">
                                    <div class="message-text">@((MarkupString)FormatResponse(item.Response))</div>
                                    @if (HasSources(item.Response))
                                    {
                                        <div class="sources-indicator">Sources cited below</div>
                                    }
                                </div>
                            </div>
                        }

                        @if (searchResponse != null)
                        {
                            <div class="message user-message">
                                <div class="message-avatar user-avatar">
                                    <span>👤</span>
                                </div>
                                <div class="message-content">
                                    <div class="message-text">@searchResponse.Query</div>
                                </div>
                            </div>
                            <div class="message assistant-message">
                                <div class="message-avatar assistant-avatar">
                                    <span>🤖</span>
                                </div>
                                <div class="message-content">
                                    @if (!string.IsNullOrEmpty(searchResponse.RAGResponse))
                                    {
                                        <div class="message-text">@((MarkupString)FormatResponse(searchResponse.RAGResponse))</div>
                                        @if (searchResponse.Timing != null &&
                                                            !string.IsNullOrEmpty(searchResponse.Timing.FormattedResponseTime))
                                        {
                                            <div class="response-time">Responded in @searchResponse.Timing.FormattedResponseTime</div>
                                        }
                                        @if (HasSources(searchResponse.RAGResponse))
                                        {
                                            <div class="sources-indicator">Sources cited below</div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="message-text no-response">No response generated.</div>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- Sources Section (only show when there's a response) -->
            @if (searchResponse != null && searchResponse.Sources?.Any() == true)
            {
                <div class="sources-section">
                    <div class="sources-header">
                        <h3>Sources (@searchResponse.Sources.Count)</h3>
                        <button class="toggle-sources-btn" @onclick="ToggleSourcesVisibility">
                            @if (areSourcesVisible)
                            {
                                <span>Hide Sources</span>
                            }
                            else
                            {
                                <span>Show Sources</span>
                            }
                        </button>
                    </div>
                    @if (areSourcesVisible)
                    {
                        <div class="sources-grid">
                            @foreach (var source in searchResponse.Sources)
                            {
                                <div class="source-card">
                                    <div class="source-header">
                                        <h4 class="source-title">📄 @GetSourceName(source.Source)</h4>
                                        <span class="source-score">@(((int)(source.Score * 100)).ToString())%</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(source.PageInfo))
                                    {
                                        <div class="source-page">@source.PageInfo</div>
                                    }
                                    <div class="source-content">
                                        @if (IsSourceExpanded(source))
                                        {
                                            @source.Content
                                        }
                                        else
                                        {
                                            @TruncateContent(source.Content, 150)
                                        }
                                    </div>
                                    <button class="toggle-content-btn" @onclick="() => ToggleSourceExpansion(source)">
                                        @if (IsSourceExpanded(source))
                                        {
                                            <span>Show Less</span>
                                        }
                                        else
                                        {
                                            <span>Show More</span>
                                        }
                                    </button>
                                </div>
                            }
                        </div>
                    }
                </div>
            }

            <!-- Input Area -->
            <div class="chat-input-container">
                <div class="input-area">
                    <div class="input-actions">
                        <button class="clear-btn" @onclick="ClearConversation" title="Clear conversation">
                            🗑️
                        </button>
                    </div>
                    <textarea class="chat-input" placeholder="Ask anything about your knowledge base..." @bind="searchQuery"
                        @onkeypress="OnKeyPress" @oninput="OnInput" disabled="@isSearching" rows="1">
                    </textarea>
                    <button class="send-btn" @onclick="PerformSearch"
                        disabled="@(isSearching || string.IsNullOrWhiteSpace(searchQuery))">
                        @if (isSearching)
                        {
                            <span class="spinner"></span>
                        }
                        else
                        {
                            <span>➤</span>
                        }
                    </button>
                </div>
                <div class="input-hint">
                    Press Enter to send, Shift+Enter for new line
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchQuery = "";
    private bool isSearching = false;
    private bool isProcessing = false;
    private bool collectionExists = false;
    private string statusMessage = "";
    private string searchError = "";
    private LocalAI.Web.Services.SearchResponse? searchResponse;
    private bool isResponseExpanded = false;
    private HashSet<LocalAI.Core.Models.SearchResult> expandedSources = new HashSet<LocalAI.Core.Models.SearchResult>();
    private List<ConversationHistoryItem> conversationHistory = new List<ConversationHistoryItem>();
    private ElementReference chatContainer;
    private bool areSourcesVisible = true;
    
    // Chat management properties
    private List<LocalAI.Core.Models.ChatConversationSummary> conversations = new List<LocalAI.Core.Models.ChatConversationSummary>();
    private LocalAI.Core.Models.ChatConversation? currentConversation;
    private bool isSidebarOpen = true;
    private bool conversationsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckCollectionStatus();
        conversationHistory = await ConversationService.GetConversationHistoryAsync();
        await LoadConversations();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Scroll to bottom of chat only on first render
        if (firstRender)
        {
            await chatContainer.FocusAsync();
        }
    }

    private async Task CheckCollectionStatus()
    {
        try
        {
            var response = await ApiService.GetCollectionStatusAsync();
            if (response.Success && response.Data != null)
            {
                collectionExists = response.Data.CollectionExists;
                statusMessage = collectionExists
                ? "Knowledge base is ready! You can start searching your documents."
                : "Knowledge base not found. Process your documents first to enable search.";
            }
            else
            {
                statusMessage = "Unable to check knowledge base status. Make sure the API is running.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error checking status: {ex.Message}";
        }
    }

    private async Task ProcessDocuments()
    {
        isProcessing = true;
        try
        {
            var response = await ApiService.ProcessDocumentsAsync();
            if (response.Success && response.Data != null)
            {
                statusMessage = response.Data.Message;
                if (response.Data.Success)
                {
                    collectionExists = true;
                    statusMessage = $"✅ Successfully processed {response.Data.ChunksProcessed} document chunks!";
                }
            }
            else
            {
                statusMessage = $"Error processing documents: {response.Error}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;

        isSearching = true;
        searchError = "";
        searchResponse = null;

        try
        {
            // Get recent context for the conversation
            var context = await ConversationService.GetRecentContextAsync(3);

            // Log context being sent
            Console.WriteLine($"[DEBUG] SearchPage sending request: {searchQuery}");
            if (context != null && context.Any())
            {
                Console.WriteLine($"[DEBUG] SearchPage sending conversation history: {context.Count} exchanges");
                for (int i = 0; i < context.Count; i++)
                {
                    var exchange = context[i];
                    Console.WriteLine($"[DEBUG] SearchPage Exchange {i + 1} - User: {exchange.Query}");
                    Console.WriteLine($"[DEBUG] SearchPage Exchange {i + 1} - Assistant: {exchange.Response}");
                }
            }
            else
            {
                Console.WriteLine("[DEBUG] SearchPage sending no conversation history");
            }

            // Perform search with context
            var response = await ApiService.SearchAsync(searchQuery.Trim(), 8, context);
            if (response.Success && response.Data != null)
            {
                searchResponse = response.Data;

                // Add to conversation history
                await ConversationService.AddToConversationHistoryAsync(searchQuery.Trim(), searchResponse.RAGResponse);

                // Refresh conversation history
                conversationHistory = await ConversationService.GetConversationHistoryAsync();
            }
            else
            {
                searchError = response.Error ?? "Unknown error occurred";
            }
        }
        catch (Exception ex)
        {
            searchError = ex.Message;
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private async Task ClearConversation()
    {
        await ConversationService.ClearConversationHistoryAsync();
        conversationHistory = new List<ConversationHistoryItem>();
        StateHasChanged(); // Force UI update
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !isSearching && !string.IsNullOrWhiteSpace(searchQuery))
        {
            await PerformSearch();
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private string FormatResponse(string response)
    {
        return response.Replace("\n", "<br>");
    }

    private string GetSourceName(string source)
    {
        return Path.GetFileNameWithoutExtension(source);
    }

    private string TruncateContent(string content, int maxLength)
    {
        if (string.IsNullOrEmpty(content) || content.Length <= maxLength)
            return content;

        return content.Substring(0, maxLength) + "...";
    }

    private void ToggleResponseFormat()
    {
        isResponseExpanded = !isResponseExpanded;
    }

    private void ToggleSourceExpansion(SearchResult source)
    {
        if (expandedSources.Contains(source))
        {
            expandedSources.Remove(source);
        }
        else
        {
            expandedSources.Add(source);
        }
    }

    private bool IsSourceExpanded(SearchResult source)
    {
        return expandedSources.Contains(source);
    }

    private bool HasSources(string response)
    {
        // Simple check for sources - in a real implementation, you might want to parse the response
        return response.Contains("[") && response.Contains("]");
    }

    private void ToggleSourcesVisibility()
    {
        areSourcesVisible = !areSourcesVisible;
    }

    // Chat management methods
    private async Task LoadConversations()
    {
        conversationsLoading = true;
        StateHasChanged();

        try
        {
            var response = await ApiService.GetConversationsAsync();
            if (response.Success && response.Data != null)
            {
                conversations = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading conversations: {ex.Message}");
        }
        finally
        {
            conversationsLoading = false;
            StateHasChanged();
        }
    }

    private async Task StartNewChat()
    {
        try
        {
            var response = await ApiService.CreateConversationAsync();
            if (response.Success && response.Data != null)
            {
                currentConversation = response.Data;
                await ClearConversation(); // Clear local session storage
                await LoadConversations(); // Refresh conversation list
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating new conversation: {ex.Message}");
        }
    }

    private async Task LoadConversation(Guid conversationId)
    {
        try
        {
            var response = await ApiService.GetConversationAsync(conversationId);
            if (response.Success && response.Data != null)
            {
                currentConversation = response.Data;
                
                // Load messages into local session storage
                var historyItems = response.Data.Messages.Select(m => new ConversationHistoryItem
                {
                    Query = m.Role == "user" ? m.Content : "",
                    Response = m.Role == "assistant" ? m.Content : "",
                    Timestamp = m.Timestamp
                }).Where(item => !string.IsNullOrEmpty(item.Query) || !string.IsNullOrEmpty(item.Response)).ToList();
                
                // For now, we'll just clear and show a message that loading is not fully implemented
                await ClearConversation();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading conversation: {ex.Message}");
        }
    }

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
    }

    private string GetConversationTitle(LocalAI.Core.Models.ChatConversationSummary conv)
    {
        if (!string.IsNullOrEmpty(conv.Title) && conv.Title != "New Chat")
            return conv.Title;
            
        // Generate title from first message if available
        return "New Chat";
    }
}
