@page "/documents"
@using LocalAI.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IApiService ApiService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Document Processing</PageTitle>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-10">

            <div class="text-center mb-4">
                <h1 class="display-5 fw-bold text-primary">üìö Document Processing</h1>
                <p class="lead text-muted">Process your knowledge base documents for semantic search</p>
            </div>

            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert @(collectionExists ? "alert-success" : "alert-warning") alert-dismissible fade show"
                     role="alert">
                    <strong>@(collectionExists ? "‚úÖ" : "‚ö†Ô∏è")</strong> @statusMessage
                </div>
            }

            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Process Documents</h5>
                </div>
                <div class="card-body">
                    <p>Process all documents in your data directories to create searchable embeddings.</p>
                    <p><strong>Current data paths:</strong></p>
                    <ul>
                        <li>Transcripts: data/transcripts/</li>
                        <li>PDFs: data/pdfs/</li>
                    </ul>

                    <button type="button" class="btn btn-primary" @onclick="ProcessDocuments" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Processing...</span>
                        }
                        else
                        {
                            <span>üöÄ Process All Documents</span>
                        }
                    </button>
                </div>
            </div>

            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">Upload New Documents</h5>
                </div>
                <div class="card-body">
                    <p>Upload new documents to be processed and added to your knowledge base.</p>

                    <div class="mb-3">
                        <label for="documentType" class="form-label">Document Type</label>
                        <select class="form-select" id="documentType" @bind="selectedDocumentType">
                            <option value="transcript">Transcript (.txt)</option>
                            <option value="pdf">PDF Document (.pdf)</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="fileUpload" class="form-label">Select File</label>
                        <InputFile id="fileUpload" class="form-control" accept=".txt,.pdf" OnChange="OnFileSelected" />
                    </div>

                    <button type="button" class="btn btn-success" @onclick="UploadDocument"
                            disabled="@(isUploading || selectedFile == null)">
                        @if (isUploading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Uploading...</span>
                        }
                        else
                        {
                            <span>üì§ Upload and Process Document</span>
                        }
                    </button>
                </div>
            </div>

            @if (isProcessing)
            {
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">Processing Progress</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3" style="height: 25px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"
                                 style="width: @progressPercentage%" aria-valuenow="@progressPercentage" aria-valuemin="0"
                                 aria-valuemax="100">
                                @progressPercentage%
                            </div>
                        </div>
                        <div class="text-center">
                            <p class="mb-1">@progressMessage</p>
                            <small class="text-muted">@progressDetails</small>
                        </div>
                    </div>
                </div>
            }

            @if (processingComplete)
            {
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">‚úÖ Processing Complete</h5>
                    </div>
                    <div class="card-body">
                        <p>Successfully processed @processedChunks document chunks and stored them in the knowledge base.</p>
                        <p>Your knowledge base is now ready for semantic search!</p>
                        <a href="/search" class="btn btn-primary">Start Searching</a>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

@code {
    private bool isProcessing = false;
    private bool isUploading = false;
    private bool collectionExists = false;
    private bool processingComplete = false;
    private string statusMessage = "";
    private int progressPercentage = 0;
    private string progressMessage = "Ready to process";
    private string progressDetails = "";
    private int processedChunks = 0;
    private string selectedDocumentType = "transcript";
    private IBrowserFile? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await CheckCollectionStatus();
    }

    private async Task CheckCollectionStatus()
    {
        try
        {
            var response = await ApiService.GetCollectionStatusAsync();
            if (response.Success && response.Data != null)
            {
                collectionExists = response.Data.CollectionExists;
                statusMessage = collectionExists
                ? "Knowledge base is ready! You can start searching your documents."
                : "Knowledge base not found. Process your documents to enable search.";
            }
            else
            {
                statusMessage = "Unable to check knowledge base status. Make sure the API is running.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error checking status: {ex.Message}";
        }
    }

    private async Task ProcessDocuments()
    {
        isProcessing = true;
        processingComplete = false;
        progressPercentage = 0;
        progressMessage = "Starting document processing...";
        progressDetails = "Initializing services";
        processedChunks = 0;
        statusMessage = "";

        try
        {
            // Call the real API instead of simulation
            var response = await ApiService.ProcessDocumentsAsync();
            if (response.Success && response.Data != null)
            {
                processedChunks = response.Data.ChunksProcessed;
                processingComplete = true;
                collectionExists = true;
                statusMessage = response.Data.Message;
                progressMessage = "Processing complete!";
                progressDetails = $"Processed {processedChunks} document chunks";
                progressPercentage = 100;
            }
            else
            {
                statusMessage = $"Error: {response.Error}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task UploadDocument()
    {
        if (selectedFile == null) return;

        isUploading = true;
        statusMessage = "";

        try
        {
            // Read the file content
            using var stream = selectedFile.OpenReadStream(10_000_000); // 10MB limit
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var fileContent = memoryStream.ToArray();

            // Call the API to upload and process the document
            var response = await ApiService.UploadDocumentAsync(selectedFile.Name, selectedDocumentType, fileContent);

            if (response.Success && response.Data != null)
            {
                statusMessage = $"‚úÖ {response.Data.Message} ({response.Data.ChunksProcessed} chunks processed)";
                selectedFile = null;
            }
            else
            {
                statusMessage = $"Error uploading document: {response.Error}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error uploading document: {ex.Message}";
        }
        finally
        {
            isUploading = false;
        }
    }
}