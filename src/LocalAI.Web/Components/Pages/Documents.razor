@page "/documents"
@using LocalAI.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@inject IApiService ApiService
@inject ILogger<Documents> Logger
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Document Management</PageTitle>

<!-- Header Navigation -->
<div class="header-nav">
    <div class="header-container">
        <div class="logo">LocalAI Knowledge</div>
        <nav class="nav-links">
            <a href="/dashboard" class="nav-link">Dashboard</a>
            <a href="/search" class="nav-link">Search</a>
            <a href="/documents" class="nav-link active">Documents</a>
            <a href="/export" class="nav-link">Export</a>
            <a href="/settings" class="nav-link">Settings</a>
            <a href="/debug" class="nav-link">Debug</a>
        </nav>
    </div>
</div>

<!-- Hero Section -->
<div class="hero-section">
    <div class="hero-container">
        <h1 class="hero-title">Document Management</h1>
        <p class="hero-subtitle">Organize and process your knowledge base documents in smaller, lighter text.</p>
    </div>
</div>

<div class="container">
    <div class="content-wrapper">
        <!-- Processing Controls Card -->
        <div class="card">
            <div class="card-header">
                <h2 class="card-title">Processing Controls</h2>
                <span class="badge badge-secondary">@processedDocumentCount Documents Processed</span>
            </div>
            <div class="card-body">
                <div class="button-group">
                    <button type="button" class="btn btn-primary" @onclick="ProcessAllDocuments" disabled="@isProcessing">
                        @if (isProcessing && processingType == "all")
                        {
                            <span class="spinner spinner-sm"></span>
                            <span>Processing All...</span>
                        }
                        else
                        {
                            <span>Process All Documents</span>
                        }
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ProcessNewDocuments" disabled="@isProcessing">
                        @if (isProcessing && processingType == "new")
                        {
                            <span class="spinner spinner-sm"></span>
                            <span>Processing New...</span>
                        }
                        else
                        {
                            <span>Process New Documents</span>
                        }
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="RefreshData">
                        <span>Refresh</span>
                    </button>
                </div>
                <div class="info-banner">
                    <span class="info-icon">ℹ️</span>
                    <span>Process documents to make them searchable.</span>
                </div>
            </div>
        </div>

        <!-- Upload Section Card -->
        <div class="card">
            <div class="card-header">
                <h2 class="card-title">Upload New Documents</h2>
            </div>
            <div class="card-body">
                <div class="form-row">
                    <div class="form-group">
                        <label for="documentType" class="form-label">Document Type</label>
                        <select class="form-select" id="documentType" @bind="selectedDocumentType">
                            <option value="transcript">Transcript (.txt)</option>
                            <option value="pdf">PDF Document (.pdf)</option>
                            <option value="webpage">Website URL</option>
                        </select>
                    </div>
                    @if (selectedDocumentType == "webpage")
                    {
                        <div class="form-group">
                            <label for="urlInput" class="form-label">Website URL</label>
                            <input type="url" class="form-control" id="urlInput" @bind="selectedUrl"
                                   placeholder="https://example.com/article" />
                            <div class="form-help">Enter a complete URL to fetch and process webpage content</div>
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            <label for="fileUpload" class="form-label">Select File</label>
                            <InputFile id="fileUpload" class="form-control" accept=".txt,.pdf,.html,.htm" OnChange="OnFileSelected" />
                        </div>
                    }
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="urlInput2" class="form-label">Or Enter URL</label>
                        <input type="url" class="form-control" id="urlInput2" placeholder="https://example.com/article" @bind="inputUrl" />
                        <div class="form-help">Enter a URL to fetch and process web content</div>
                    </div>
                    <div class="form-group align-end">
                        <button type="button" class="btn btn-primary" @onclick="FetchUrl"
                            disabled="@(isUploading || string.IsNullOrWhiteSpace(inputUrl))">
                            @if (isUploading)
                            {
                                <span class="spinner spinner-sm"></span>
                                <span>Fetching...</span>
                            }
                            else
                            {
                                <span>Fetch & Process URL</span>
                            }
                        </button>
                    </div>
                </div>
                <button type="button" class="btn btn-primary" @onclick="UploadDocument"
                    disabled="@(isUploading || (selectedDocumentType != "webpage" && selectedFile == null) || (selectedDocumentType == "webpage" && string.IsNullOrWhiteSpace(selectedUrl)))">
                    @if (isUploading)
                    {
                        <span class="spinner spinner-sm"></span>
                        <span>Uploading...</span>
                    }
                    else
                    {
                        <span>Upload and Process</span>
                    }
                </button>
            </div>
        </div>

        <!-- Document Categories Card -->
        <div class="card">
            <div class="card-header">
                <h2 class="card-title">Document Categories</h2>
                <div class="header-controls">
                    <input type="text" class="search-input" placeholder="Search documents..." @bind="searchTerm" />
                    <span class="badge badge-secondary">@filteredDocumentCount/@processedDocumentCount Documents</span>
                </div>
            </div>
            <div class="card-body">
                @if (isDataLoading)
                {
                    <div class="loading-container">
                        <div class="spinner"></div>
                        <p>Loading document data...</p>
                    </div>
                }
                else
                {
                    <div class="accordion" id="documentCategories">
                        @foreach (var category in documentCategories)
                        {
                            var categoryDocuments = GetDocumentsForCategory(category.Key);
                            var filteredCategoryDocuments = categoryDocuments.Where(d => string.IsNullOrEmpty(searchTerm) || 
                                d.FileName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                            
                            if (filteredCategoryDocuments.Any() || string.IsNullOrEmpty(searchTerm))
                            {
                                <div class="accordion-item">
                                    <h3 class="accordion-header" id="heading-@category.Key">
                                        <button class="accordion-button @((categoryExpanded.ContainsKey(category.Key) && categoryExpanded[category.Key]) ? "" : "collapsed")" 
                                                type="button" 
                                                @onclick="() => ToggleCategory(category.Key)"
                                                data-bs-toggle="collapse" 
                                                data-bs-target="#collapse-@category.Key" 
                                                aria-expanded="@((categoryExpanded.ContainsKey(category.Key) && categoryExpanded[category.Key]).ToString().ToLower())" 
                                                aria-controls="collapse-@category.Key">
                                            <div class="category-header">
                                                <span class="category-icon">@category.Value.Icon</span>
                                                <span class="category-name">@category.Value.Name</span>
                                                <span class="badge badge-primary">@filteredCategoryDocuments.Count</span>
                                            </div>
                                        </button>
                                    </h3>
                                    <div id="collapse-@category.Key" class="accordion-collapse collapse @((categoryExpanded.ContainsKey(category.Key) && categoryExpanded[category.Key]) ? "show" : "")" 
                                         aria-labelledby="heading-@category.Key" 
                                         data-bs-parent="#documentCategories">
                                        <div class="accordion-body">
                                            @if (filteredCategoryDocuments.Any())
                                            {
                                                <div class="table-container">
                                                    <table class="documents-table">
                                                        <thead>
                                                            <tr>
                                                                <th>Document</th>
                                                                <th>Chunks</th>
                                                                <th>Processed</th>
                                                                <th>Status</th>
                                                                <th>Actions</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var doc in filteredCategoryDocuments)
                                                            {
                                                                <tr>
                                                                    <td class="document-info">
                                                                        <div class="document-icon">📄</div>
                                                                        <div class="document-details">
                                                                            <div class="document-name">@doc.FileName</div>
                                                                            <div class="document-size">@GetFileSize(doc.FileName)</div>
                                                                        </div>
                                                                    </td>
                                                                    <td>
                                                                        <span class="badge badge-info">@doc.ChunksProcessed</span>
                                                                    </td>
                                                                    <td class="processed-time">
                                                                        @doc.ProcessedAt
                                                                    </td>
                                                                    <td>
                                                                        @if (doc.Success)
                                                                        {
                                                                            <span class="badge badge-success">Processed</span>
                                                                        }
                                                                        else
                                                                        {
                                                                            <span class="badge badge-error" title="@doc.ErrorMessage">Failed</span>
                                                                        }
                                                                    </td>
                                                                    <td class="actions">
                                                                        <button class="icon-button" @onclick="() => ShowDocumentDetails(doc)" title="View">
                                                                            <span class="icon">👁️</span>
                                                                        </button>
                                                                        <button class="icon-button" @onclick="() => ReprocessDocument(doc)" disabled="@isProcessing" title="Reprocess">
                                                                            <span class="icon">🔄</span>
                                                                        </button>
                                                                        <button class="icon-button" @onclick="() => DeleteDocument(doc)" disabled="@isProcessing" title="Delete">
                                                                            <span class="icon">🗑️</span>
                                                                        </button>
                                                                    </td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="empty-state">
                                                    <div class="empty-icon">📁</div>
                                                    <p class="empty-text">No documents found in this category</p>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Processing Progress -->
        @if (isProcessing)
        {
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">Processing Progress</h2>
                </div>
                <div class="card-body">
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: @progressPercentage%"></div>
                        </div>
                        <div class="progress-text">@progressPercentage%</div>
                    </div>
                    <div class="progress-details">
                        <p class="progress-message">@progressMessage</p>
                        <p class="progress-subtext">@progressDetails</p>
                    </div>
                    @if (!string.IsNullOrEmpty(currentProcessingFile))
                    {
                        <div class="processing-file">
                            <div class="file-info">
                                <span>Processing file:</span>
                                <span class="file-name">@currentProcessingFile</span>
                            </div>
                            @if (totalFilesToProcess > 0)
                            {
                                <div class="file-progress">
                                    <span>Progress:</span>
                                    <span>@currentFileIndex of @totalFilesToProcess files</span>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Processing Complete -->
        @if (processingComplete)
        {
            <div class="card success-card">
                <div class="card-header">
                    <h2 class="card-title">Processing Complete</h2>
                </div>
                <div class="card-body">
                    <div class="success-content">
                        <div class="success-icon">✅</div>
                        <p>Successfully processed @processedChunks document chunks and stored them in the knowledge base.</p>
                        <p>Your knowledge base is now ready for semantic search!</p>
                        <a href="/search" class="btn btn-primary">Start Searching</a>
                    </div>
                </div>
            </div>
        }

        <!-- Document Details Modal -->
        @if (selectedDocument != null)
        {
            <div class="modal-overlay">
                <div class="modal">
                    <div class="modal-header">
                        <h3 class="modal-title">📄 @selectedDocument.FileName</h3>
                        <button type="button" class="modal-close" @onclick="CloseDocumentDetails">×</button>
                    </div>
                    <div class="modal-body">
                        <div class="modal-content-grid">
                            <div class="modal-section">
                                <h4>Document Information</h4>
                                <div class="info-grid">
                                    <div class="info-item">
                                        <span class="info-label">Type:</span>
                                        <span class="info-value">@selectedDocument.DocumentType</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="info-label">Chunks Processed:</span>
                                        <span class="info-value">@selectedDocument.ChunksProcessed</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="info-label">Processing Time:</span>
                                        <span class="info-value">@selectedDocument.ProcessingDuration</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="info-label">Processed At:</span>
                                        <span class="info-value">@selectedDocument.ProcessedAt</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="info-label">Status:</span>
                                        <span class="info-value">
                                            @if (selectedDocument.Success)
                                            {
                                                <span class="badge badge-success">Success</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-error">Failed</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-section">
                                <h4>File Information</h4>
                                <div class="info-grid">
                                    <div class="info-item">
                                        <span class="info-label">File Size:</span>
                                        <span class="info-value">@GetFileSize(selectedDocument.FileName)</span>
                                    </div>
                                    <div class="info-item">
                                        <span class="info-label">File Path:</span>
                                        <span class="info-value">@GetFilePath(selectedDocument.FileName)</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (!selectedDocument.Success && !string.IsNullOrEmpty(selectedDocument.ErrorMessage))
                        {
                            <div class="error-details">
                                <h4>Error Details:</h4>
                                <p>@selectedDocument.ErrorMessage</p>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDocumentDetails">Close</button>
                        <button type="button" class="btn btn-secondary" @onclick="() => ReprocessDocument(selectedDocument)" disabled="@isProcessing">
                            @if (isProcessing && processingType == "reprocess")
                            {
                                <span class="spinner spinner-sm"></span>
                                <span>Reprocessing...</span>
                            }
                            else
                            {
                                <span>Reprocess Document</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    /* Tailscale-inspired Document Management UI */
    :root {
        --primary-bg: #1a1a1a;
        --card-bg: #ffffff;
        --text-primary: #111111;
        --text-secondary: #666666;
        --accent-blue: #007acc;
        --success-green: #4ade80;
        --warning-orange: #f59e0b;
        --error-red: #ef4444;
        --border-color: #e5e5e5;
        --shadow: 0 4px 12px rgba(0,0,0,0.1);
        --border-radius: 8px;
        --spacing-sm: 8px;
        --spacing-md: 16px;
        --spacing-lg: 24px;
        --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    /* Global Styles */
    body {
        font-family: var(--font-family);
        background-color: var(--primary-bg);
        color: var(--text-primary);
        margin: 0;
        padding: 0;
        line-height: 1.5;
    }

    /* Header Navigation */
    .header-nav {
        background-color: #f9f9f9;
        border-bottom: 1px solid var(--border-color);
        padding: var(--spacing-sm) 0;
    }

    .header-container {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 var(--spacing-md);
    }

    .logo {
        font-size: 18px;
        font-weight: 600;
        color: var(--text-primary);
    }

    .nav-links {
        display: flex;
        gap: var(--spacing-md);
    }

    .nav-link {
        text-decoration: none;
        color: var(--text-secondary);
        font-size: 14px;
        font-weight: 500;
        padding: var(--spacing-sm);
        border-radius: var(--border-radius);
        transition: all 0.2s ease;
    }

    .nav-link:hover {
        color: var(--accent-blue);
        background-color: rgba(0, 122, 204, 0.1);
    }

    .nav-link.active {
        color: var(--accent-blue);
        background-color: rgba(0, 122, 204, 0.1);
    }

    /* Hero Section */
    .hero-section {
        background-color: #f9f9f9;
        padding: var(--spacing-lg) 0;
        border-bottom: 1px solid var(--border-color);
    }

    .hero-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 var(--spacing-md);
    }

    .hero-title {
        font-size: 24px;
        font-weight: 700;
        margin: 0 0 var(--spacing-sm) 0;
        color: var(--text-primary);
    }

    .hero-subtitle {
        font-size: 16px;
        color: var(--text-secondary);
        margin: 0;
        font-weight: 400;
    }

    /* Main Container */
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: var(--spacing-md);
    }

    .content-wrapper {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-lg);
    }

    /* Cards */
    .card {
        background-color: var(--card-bg);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        overflow: hidden;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--spacing-md);
        border-bottom: 1px solid var(--border-color);
    }

    .card-title {
        font-size: 20px;
        font-weight: 600;
        margin: 0;
        color: var(--text-primary);
    }

    .card-body {
        padding: var(--spacing-md);
    }

    /* Header Controls */
    .header-controls {
        display: flex;
        align-items: center;
        gap: var(--spacing-md);
    }

    .search-input {
        padding: 8px 12px;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        font-size: 14px;
        width: 200px;
    }

    /* Buttons */
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 10px 16px;
        border-radius: var(--border-radius);
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        border: none;
        transition: all 0.2s ease;
        text-decoration: none;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background-color: var(--accent-blue);
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #006bb3;
    }

    .btn-secondary {
        background-color: transparent;
        color: var(--accent-blue);
        border: 1px solid var(--accent-blue);
    }

    .btn-secondary:hover:not(:disabled) {
        background-color: rgba(0, 122, 204, 0.1);
    }

    .button-group {
        display: flex;
        gap: var(--spacing-sm);
        margin-bottom: var(--spacing-md);
        flex-wrap: wrap;
    }

    /* Info Banner */
    .info-banner {
        display: flex;
        align-items: center;
        gap: var(--spacing-sm);
        padding: var(--spacing-sm);
        background-color: #f1f5f9;
        border-radius: var(--border-radius);
        font-size: 14px;
        color: var(--text-secondary);
    }

    .info-icon {
        font-size: 16px;
    }

    /* Forms */
    .form-row {
        display: flex;
        gap: var(--spacing-md);
        margin-bottom: var(--spacing-md);
        flex-wrap: wrap;
    }

    .form-group {
        flex: 1;
        min-width: 250px;
    }

    .align-end {
        display: flex;
        align-items: flex-end;
    }

    .form-label {
        display: block;
        font-size: 14px;
        font-weight: 500;
        margin-bottom: 6px;
        color: var(--text-primary);
    }

    .form-select,
    .form-control {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        font-size: 14px;
        font-family: var(--font-family);
    }

    .form-select:focus,
    .form-control:focus {
        outline: none;
        border-color: var(--accent-blue);
        box-shadow: 0 0 0 2px rgba(0, 122, 204, 0.2);
    }

    .form-help {
        font-size: 12px;
        color: var(--text-secondary);
        margin-top: 4px;
    }

    /* Badges */
    .badge {
        display: inline-flex;
        align-items: center;
        padding: 4px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-primary {
        background-color: var(--accent-blue);
        color: white;
    }

    .badge-secondary {
        background-color: #e2e8f0;
        color: var(--text-primary);
    }

    .badge-success {
        background-color: var(--success-green);
        color: white;
    }

    .badge-error {
        background-color: var(--error-red);
        color: white;
    }

    .badge-info {
        background-color: var(--accent-blue);
        color: white;
    }

    /* Accordion */
    .accordion-item {
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        margin-bottom: var(--spacing-sm);
    }

    .accordion-header {
        margin: 0;
    }

    .accordion-button {
        width: 100%;
        padding: var(--spacing-md);
        background-color: #f8fafc;
        border: none;
        text-align: left;
        cursor: pointer;
        border-radius: var(--border-radius);
        transition: all 0.2s ease;
    }

    .accordion-button:not(.collapsed) {
        background-color: #dbeafe;
        border-radius: var(--border-radius) var(--border-radius) 0 0;
        border-bottom: 1px solid var(--border-color);
    }

    .category-header {
        display: flex;
        align-items: center;
        gap: var(--spacing-sm);
    }

    .category-icon {
        font-size: 18px;
    }

    .category-name {
        font-weight: 600;
        color: var(--text-primary);
    }

    .accordion-body {
        padding: var(--spacing-md);
    }

    /* Tables */
    .table-container {
        overflow-x: auto;
    }

    .documents-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
    }

    .documents-table th {
        text-align: left;
        padding: 12px;
        border-bottom: 1px solid var(--border-color);
        font-weight: 600;
        color: var(--text-primary);
    }

    .documents-table td {
        padding: 12px;
        border-bottom: 1px solid #f1f5f9;
    }

    .document-info {
        display: flex;
        align-items: center;
        gap: var(--spacing-sm);
    }

    .document-icon {
        font-size: 18px;
    }

    .document-details {
        display: flex;
        flex-direction: column;
    }

    .document-name {
        font-weight: 500;
        color: var(--text-primary);
    }

    .document-size {
        font-size: 12px;
        color: var(--text-secondary);
    }

    .processed-time {
        font-size: 12px;
        color: var(--text-secondary);
    }

    .actions {
        display: flex;
        gap: var(--spacing-sm);
    }

    .icon-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 6px;
        border-radius: 4px;
        transition: background-color 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .icon-button:hover:not(:disabled) {
        background-color: #f1f5f9;
    }

    .icon-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .icon {
        font-size: 16px;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: var(--spacing-lg);
    }

    .empty-icon {
        font-size: 48px;
        margin-bottom: var(--spacing-sm);
        color: var(--text-secondary);
    }

    .empty-text {
        margin: 0;
        color: var(--text-secondary);
        font-size: 14px;
    }

    /* Progress */
    .progress-container {
        display: flex;
        align-items: center;
        gap: var(--spacing-md);
        margin-bottom: var(--spacing-md);
    }

    .progress-bar {
        flex: 1;
        height: 12px;
        background-color: #e2e8f0;
        border-radius: 6px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background-color: var(--accent-blue);
        border-radius: 6px;
        transition: width 0.3s ease;
    }

    .progress-text {
        font-weight: 600;
        min-width: 40px;
        text-align: right;
    }

    .progress-details {
        text-align: center;
        margin-bottom: var(--spacing-md);
    }

    .progress-message {
        font-weight: 500;
        margin: 0 0 4px 0;
    }

    .progress-subtext {
        font-size: 14px;
        color: var(--text-secondary);
        margin: 0;
    }

    .processing-file {
        padding: var(--spacing-md);
        background-color: #f1f5f9;
        border-radius: var(--border-radius);
    }

    .file-info,
    .file-progress {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .file-info:last-child,
    .file-progress:last-child {
        margin-bottom: 0;
    }

    .file-name {
        font-weight: 600;
    }

    /* Success Card */
    .success-card {
        border: 1px solid var(--success-green);
    }

    .success-content {
        text-align: center;
        padding: var(--spacing-lg);
    }

    .success-icon {
        font-size: 48px;
        margin-bottom: var(--spacing-md);
    }

    /* Modal */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        padding: var(--spacing-md);
    }

    .modal {
        background-color: var(--card-bg);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        max-width: 800px;
        width: 100%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--spacing-md);
        border-bottom: 1px solid var(--border-color);
    }

    .modal-title {
        font-size: 20px;
        font-weight: 600;
        margin: 0;
        color: var(--text-primary);
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        transition: background-color 0.2s ease;
    }

    .modal-close:hover {
        background-color: #f1f5f9;
    }

    .modal-body {
        padding: var(--spacing-md);
    }

    .modal-content-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--spacing-lg);
    }

    @@media (max-width: 768px) {
        .modal-content-grid {
            grid-template-columns: 1fr;
        }
    }

    .modal-section h4 {
        margin-top: 0;
        margin-bottom: var(--spacing-md);
        color: var(--text-primary);
        font-size: 16px;
    }

    .info-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--spacing-sm);
    }

    .info-item {
        display: flex;
        flex-direction: column;
    }

    .info-label {
        font-size: 12px;
        color: var(--text-secondary);
        margin-bottom: 2px;
    }

    .info-value {
        font-size: 14px;
        color: var(--text-primary);
        font-weight: 500;
    }

    .error-details {
        margin-top: var(--spacing-lg);
        padding: var(--spacing-md);
        background-color: #fef2f2;
        border-radius: var(--border-radius);
        border-left: 3px solid var(--error-red);
    }

    .error-details h4 {
        margin-top: 0;
        color: var(--text-primary);
    }

    .error-details p {
        margin: 0;
        color: var(--text-secondary);
        font-size: 14px;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: var(--spacing-sm);
        padding: var(--spacing-md);
        border-top: 1px solid var(--border-color);
    }

    /* Loading */
    .loading-container {
        text-align: center;
        padding: var(--spacing-lg);
    }

    .spinner {
        width: 32px;
        height: 32px;
        border: 3px solid rgba(0, 122, 204, 0.2);
        border-top: 3px solid var(--accent-blue);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto var(--spacing-sm);
    }

    .spinner-sm {
        width: 16px;
        height: 16px;
        border-width: 2px;
        margin: 0;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .header-container {
            flex-direction: column;
            gap: var(--spacing-sm);
        }

        .nav-links {
            flex-wrap: wrap;
            justify-content: center;
        }

        .card-header {
            flex-direction: column;
            align-items: flex-start;
            gap: var(--spacing-sm);
        }

        .header-controls {
            width: 100%;
            flex-direction: column;
            align-items: stretch;
        }

        .search-input {
            width: 100%;
        }

        .form-row {
            flex-direction: column;
        }

        .form-group {
            min-width: auto;
        }

        .button-group {
            flex-direction: column;
        }

        .btn {
            width: 100%;
        }

        .actions {
            flex-wrap: wrap;
        }
    }
</style>

@code {
    private bool isProcessing = false;
    private bool isUploading = false;
    private bool processingComplete = false;
    private bool isDataLoading = false;
    private string processingType = "";
    private string statusMessage = "";
    private int progressPercentage = 0;
    private string progressMessage = "Ready to process";
    private string progressDetails = "";
    private int processedChunks = 0;
    private string selectedDocumentType = "transcript";
    private IBrowserFile? selectedFile;
    private string selectedUrl = "";
    private string inputUrl = "";
    private string searchTerm = "";
    
    // Processing details
    private string currentProcessingFile = "";
    private int totalFilesToProcess = 0;
    private int currentFileIndex = 0;
    
    // Document data
    private List<ProcessedDocumentInfo> allProcessedDocuments = new();
    private ProcessedDocumentInfo? selectedDocument;

    // Track expanded state of categories
    private Dictionary<string, bool> categoryExpanded = new();

    // Document categories with icons and names
    private Dictionary<string, (string Name, string Icon)> documentCategories = new()
    {
        { "pdfs", ("PDF Documents", "📚") },
        { "transcripts", ("Transcripts", "📝") },
        { "webpages", ("Web Pages", "🌐") }
    };

    // Computed properties
    private int processedDocumentCount => allProcessedDocuments.Count;
    private int filteredDocumentCount => string.IsNullOrEmpty(searchTerm) 
        ? allProcessedDocuments.Count 
        : allProcessedDocuments.Count(d => d.FileName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Documents page initialized");
        // Initialize category expanded state
        foreach (var category in documentCategories.Keys)
        {
            categoryExpanded[category] = false;
        }
        await LoadProcessingData();
    }

    private async Task LoadProcessingData()
    {
        isDataLoading = true;
        StateHasChanged();
        
        try
        {
            // Load all processed documents
            var allDocsResponse = await ApiService.GetProcessedDocumentsAsync();
            if (allDocsResponse.Success && allDocsResponse.Data != null)
            {
                allProcessedDocuments = allDocsResponse.Data.ProcessedFiles.ToList();
                Logger.LogInformation($"Loaded {allProcessedDocuments.Count} processed documents");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading processing data");
            statusMessage = "Warning: Could not load processing history data.";
        }
        finally
        {
            isDataLoading = false;
            StateHasChanged();
        }
    }

    private List<ProcessedDocumentInfo> GetDocumentsForCategory(string category)
    {
        if (category == "pdfs")
        {
            // Return all PDF documents
            return allProcessedDocuments
                .Where(d => d.DocumentType == "PDF")
                .ToList();
        }

        if (category == "transcripts")
        {
            return allProcessedDocuments
                .Where(d => d.DocumentType == "Transcript")
                .ToList();
        }

        if (category == "webpages")
        {
            return allProcessedDocuments
                .Where(d => d.DocumentType == "WebPage")
                .ToList();
        }

        // Return empty list for any other categories
        return new List<ProcessedDocumentInfo>();
    }

    private async Task ProcessAllDocuments()
    {
        Logger.LogInformation("Starting processing of all documents");
        await ProcessDocuments("all");
    }

    private async Task ProcessNewDocuments()
    {
        Logger.LogInformation("Starting processing of new documents");
        processingType = "new";
        isProcessing = true;
        processingComplete = false;
        progressPercentage = 0;
        progressMessage = "Starting new document processing...";
        progressDetails = "Scanning for new documents to process";
        currentProcessingFile = "";
        totalFilesToProcess = 0;
        currentFileIndex = 0;
        processedChunks = 0;
        statusMessage = "";
        
        StateHasChanged(); // Update UI immediately

        try
        {
            Logger.LogInformation("Calling API to process new documents");
            progressMessage = "Processing new documents...";
            progressDetails = "This may take several minutes depending on the number and size of documents";
            StateHasChanged();
            
            var response = await ApiService.ProcessNewDocumentsAsync();
            Logger.LogInformation("Received API response for new document processing");

            if (response.Success && response.Data != null)
            {
                processedChunks = response.Data.ChunksProcessed;
                processingComplete = true;
                statusMessage = response.Data.Message;
                progressMessage = "Processing complete!";
                progressDetails = $"Processed {processedChunks} new document chunks";
                currentProcessingFile = "";
                progressPercentage = 100;
                Logger.LogInformation($"New document processing completed successfully. Processed {processedChunks} chunks");

                // Reload the processing data to reflect new state
                await LoadProcessingData();
            }
            else
            {
                statusMessage = $"Error: {response.Error}";
                progressMessage = "Processing failed";
                progressDetails = response.Error;
                Logger.LogWarning("New document processing failed: {0}", response.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            progressMessage = "Processing failed";
            progressDetails = ex.Message;
            Logger.LogError(ex, "Unexpected error during new document processing");
        }
        finally
        {
            isProcessing = false;
            processingType = "";
            StateHasChanged();
        }
    }

    private async Task ProcessDocuments(string type)
    {
        processingType = type;
        isProcessing = true;
        processingComplete = false;
        progressPercentage = 0;
        progressMessage = $"Starting {type} document processing...";
        progressDetails = "Scanning documents to process";
        currentProcessingFile = "";
        totalFilesToProcess = 0;
        currentFileIndex = 0;
        processedChunks = 0;
        statusMessage = "";
        
        StateHasChanged(); // Update UI immediately

        try
        {
            Logger.LogInformation("Calling API to process documents");
            progressMessage = $"Processing {type} documents...";
            progressDetails = "This may take several minutes depending on the number and size of documents";
            StateHasChanged();
            
            var response = await ApiService.ProcessDocumentsAsync();
            Logger.LogInformation("Received API response for document processing");

            if (response.Success && response.Data != null)
            {
                processedChunks = response.Data.ChunksProcessed;
                processingComplete = true;
                statusMessage = response.Data.Message;
                progressMessage = "Processing complete!";
                progressDetails = $"Processed {processedChunks} document chunks";
                currentProcessingFile = "";
                progressPercentage = 100;
                Logger.LogInformation($"Document processing completed successfully. Processed {processedChunks} chunks");

                // Reload the processing data to reflect new state
                await LoadProcessingData();
            }
            else
            {
                statusMessage = $"Error: {response.Error}";
                progressMessage = "Processing failed";
                progressDetails = response.Error;
                Logger.LogWarning("Document processing failed: {0}", response.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            progressMessage = "Processing failed";
            progressDetails = ex.Message;
            Logger.LogError(ex, "Unexpected error during document processing");
        }
        finally
        {
            isProcessing = false;
            processingType = "";
            StateHasChanged();
        }
    }

    private async Task ReprocessDocument(ProcessedDocumentInfo document)
    {
        Logger.LogInformation("Starting reprocessing of document: {0}", document.FileName);
        processingType = "reprocess";
        isProcessing = true;
        progressMessage = $"Reprocessing document...";
        progressDetails = $"File: {document.FileName}";
        StateHasChanged();

        try
        {
            // For now, we'll just call the same API endpoint
            // In a more advanced implementation, we would implement a specific reprocessing endpoint
            var response = await ApiService.ProcessDocumentsAsync();
            
            if (response.Success && response.Data != null)
            {
                statusMessage = $"✅ Successfully reprocessed document";
                Logger.LogInformation("Document reprocessing completed successfully");
                // Reload data to show updated status
                await LoadProcessingData();
            }
            else
            {
                statusMessage = $"Error reprocessing document: {response.Error}";
                Logger.LogWarning("Document reprocessing failed: {0}", response.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error reprocessing document: {ex.Message}";
            Logger.LogError(ex, "Unexpected error during document reprocessing");
        }
        finally
        {
            isProcessing = false;
            processingType = "";
            StateHasChanged();
        }
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task FetchUrl()
    {
        isUploading = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            Logger.LogInformation("Starting URL processing for {0}", inputUrl);

            if (string.IsNullOrWhiteSpace(inputUrl))
            {
                Logger.LogWarning("Attempted to process empty URL");
                statusMessage = "Error: Please enter a valid URL";
                return;
            }

            // Validate URL format
            if (!Uri.TryCreate(inputUrl, UriKind.Absolute, out var uri) ||
                (uri.Scheme != Uri.UriSchemeHttp && uri.Scheme != Uri.UriSchemeHttps))
            {
                Logger.LogWarning("Invalid URL format: {0}", inputUrl);
                statusMessage = "Error: Please enter a valid HTTP or HTTPS URL";
                return;
            }

            // Call the API to fetch and process the URL
            var response = await ApiService.FetchUrlAsync(inputUrl);

            if (response.Success && response.Data != null)
            {
                statusMessage = $"✅ {response.Data.Message}";
                Logger.LogInformation("URL processing completed successfully. Processed {0} chunks", response.Data.ChunksProcessed);
                inputUrl = ""; // Clear the URL input

                // Reload processing data to include the new document
                await LoadProcessingData();
            }
            else
            {
                statusMessage = $"Error processing URL: {response.Error}";
                Logger.LogWarning("URL processing failed: {0}", response.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error processing URL");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task UploadDocument()
    {
        isUploading = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            if (selectedDocumentType == "webpage")
            {
                // Handle URL processing
                Logger.LogInformation("Starting URL processing for {0}", selectedUrl);

                if (string.IsNullOrWhiteSpace(selectedUrl))
                {
                    Logger.LogWarning("Attempted to process empty URL");
                    statusMessage = "Error: Please enter a valid URL";
                    return;
                }

                // Validate URL format
                if (!Uri.TryCreate(selectedUrl, UriKind.Absolute, out var uri) ||
                    (uri.Scheme != Uri.UriSchemeHttp && uri.Scheme != Uri.UriSchemeHttps))
                {
                    Logger.LogWarning("Invalid URL format: {0}", selectedUrl);
                    statusMessage = "Error: Please enter a valid HTTP or HTTPS URL";
                    return;
                }

                // Call the API to fetch and process the URL
                var response = await ApiService.FetchUrlAsync(selectedUrl);

                if (response.Success && response.Data != null)
                {
                    statusMessage = $"✅ {response.Data.Message}";
                    Logger.LogInformation("URL processing completed successfully. Processed {0} chunks", response.Data.ChunksProcessed);
                    selectedUrl = ""; // Clear the URL input

                    // Reload processing data to include the new document
                    await LoadProcessingData();
                }
                else
                {
                    statusMessage = $"Error processing URL: {response.Error}";
                    Logger.LogWarning("URL processing failed: {0}", response.Error);
                }
            }
            else
            {
                // Handle file upload
                Logger.LogInformation("Starting document upload for {0}", selectedFile?.Name);
                if (selectedFile == null)
                {
                    Logger.LogWarning("Attempted to upload null file");
                    statusMessage = "Error: Please select a file to upload";
                    return;
                }

                Logger.LogInformation("Selected file: {0} ({1} bytes)", selectedFile.Name, selectedFile.Size);

                // Read the file content
                using var stream = selectedFile.OpenReadStream(10_000_000); // 10MB limit
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var fileContent = memoryStream.ToArray();

                // Call the API to upload and process the document
                var response = await ApiService.UploadDocumentAsync(selectedFile.Name, selectedDocumentType, fileContent);

                if (response.Success && response.Data != null)
                {
                    statusMessage = $"✅ {response.Data.Message}";
                    Logger.LogInformation("Document upload completed successfully. Processed {0} chunks", response.Data.ChunksProcessed);
                    selectedFile = null;

                    // Reload processing data to include the new document
                    await LoadProcessingData();
                }
                else
                {
                    statusMessage = $"Error uploading document: {response.Error}";
                    Logger.LogWarning("Document upload failed: {0}", response.Error);
                }
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error processing document/URL");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadProcessingData();
    }

    private void ToggleCategory(string categoryKey)
    {
        // Toggle the expanded state for this category
        if (categoryExpanded.ContainsKey(categoryKey))
        {
            categoryExpanded[categoryKey] = !categoryExpanded[categoryKey];
        }
        else
        {
            categoryExpanded[categoryKey] = true;
        }
        StateHasChanged();
    }

    private void ShowDocumentDetails(ProcessedDocumentInfo document)
    {
        selectedDocument = document;
    }

    private void CloseDocumentDetails()
    {
        selectedDocument = null;
    }

    private async Task DeleteDocument(ProcessedDocumentInfo document)
    {
        // Confirm deletion
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{document.FileName}'? This will remove all its embeddings from the knowledge base.");
        if (!confirm) return;

        Logger.LogInformation("Deleting document: {0}", document.FileName);
        statusMessage = $"Deleting document {document.FileName}...";
        StateHasChanged();

        try
        {
            var response = await ApiService.DeleteDocumentAsync(document.FileName);
            
            if (response.Success)
            {
                statusMessage = $"✅ {response.Data}";
                Logger.LogInformation("Document deleted successfully: {0}", document.FileName);
                
                // Reload processing data to reflect the deletion
                await LoadProcessingData();
            }
            else
            {
                statusMessage = $"Error deleting document: {response.Error}";
                Logger.LogError("Error deleting document: {0}", response.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error deleting document: {ex.Message}";
            Logger.LogError(ex, "Unexpected error during document deletion");
        }
    }

    private string GetFileSize(string fileName)
    {
        // In a real implementation, we would get the actual file size
        // For now, we'll return a placeholder
        return "Unknown size";
    }

    private string GetFilePath(string fileName)
    {
        // Determine the file path based on the document type
        if (fileName.EndsWith(".txt"))
            return $"data/transcripts/{fileName}";
        if (fileName.EndsWith(".pdf"))
            return $"data/pdfs/{fileName}";
        
        // For web pages and other types
        return $"data/webpages/{fileName}";
    }
}
