@page "/documents"
@using LocalAI.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@inject IApiService ApiService
@inject ILogger<Documents> Logger
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Document Management</PageTitle>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-12">
            <!-- Header -->
            <div class="text-center mb-4">
                <h1 class="display-5 fw-bold text-primary">üìö Document Management</h1>
                <p class="lead text-muted">Organize and process your knowledge base documents</p>
            </div>

            <!-- Processing Controls -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">‚öôÔ∏è Processing Controls</h5>
                    <span class="badge bg-light text-dark">@processedDocumentCount Documents Processed</span>
                </div>
                <div class="card-body">
                    <div class="d-flex flex-wrap gap-2 mb-3">
                        <button type="button" class="btn btn-primary" @onclick="ProcessAllDocuments" disabled="@isProcessing">
                            @if (isProcessing && processingType == "all")
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Processing All...</span>
                            }
                            else
                            {
                                <span>üöÄ Process All Documents</span>
                            }
                        </button>
                        <button type="button" class="btn btn-success" @onclick="ProcessNewDocuments" disabled="@isProcessing">
                            @if (isProcessing && processingType == "new")
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Processing New...</span>
                            }
                            else
                            {
                                <span>üÜï Process New Documents</span>
                            }
                        </button>
                        <button type="button" class="btn btn-info" @onclick="RefreshData">
                            <span>üîÑ Refresh</span>
                        </button>
                    </div>
                    <div class="alert alert-info mb-0" role="alert">
                        <i class="bi bi-info-circle"></i> Process documents to make them searchable in your knowledge base
                    </div>
                </div>
            </div>

            <!-- Upload Section -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">üì§ Upload New Documents</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="documentType" class="form-label">Document Type</label>
                            <select class="form-select" id="documentType" @bind="selectedDocumentType">
                                <option value="transcript">Transcript (.txt)</option>
                                <option value="pdf">PDF Document (.pdf)</option>
                                <option value="webpage">Website URL</option>
                            </select>
                        </div>
                        @if (selectedDocumentType == "webpage")
                        {
                            <div class="col-md-6 mb-3">
                                <label for="urlInput" class="form-label">Website URL</label>
                                <input type="url" class="form-control" id="urlInput" @bind="selectedUrl"
                                       placeholder="https://example.com/article" />
                                <div class="form-text">Enter a complete URL to fetch and process webpage content</div>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-6 mb-3">
                                <label for="fileUpload" class="form-label">Select File</label>
                                <InputFile id="fileUpload" class="form-control" accept=".txt,.pdf,.html,.htm" OnChange="OnFileSelected" />
                            </div>
                        }
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="urlInput" class="form-label">Or Enter URL</label>
                            <input type="url" class="form-control" id="urlInput" placeholder="https://example.com/article" @bind="inputUrl" />
                            <div class="form-text">Enter a URL to fetch and process web content</div>
                        </div>
                        <div class="col-md-6 mb-3 d-flex align-items-end">
                            <button type="button" class="btn btn-success" @onclick="FetchUrl"
                                disabled="@(isUploading || string.IsNullOrWhiteSpace(inputUrl))">
                                @if (isUploading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Fetching...</span>
                                }
                                else
                                {
                                    <span>üåê Fetch & Process URL</span>
                                }
                            </button>
                        </div>
                    </div>
                    <button type="button" class="btn btn-success" @onclick="UploadDocument"
                        disabled="@(isUploading || (selectedDocumentType != "webpage" && selectedFile == null) || (selectedDocumentType == "webpage" && string.IsNullOrWhiteSpace(selectedUrl)))">
                        @if (isUploading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Uploading...</span>
                        }
                        else
                        {
                            <span>üì§ Upload and Process</span>
                        }
                    </button>
                </div>
            </div>

            <!-- Document Categories -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">üìÇ Document Categories</h5>
                    <div class="d-flex align-items-center">
                        <input type="text" class="form-control form-control-sm me-2" placeholder="Search documents..." @bind="searchTerm" />
                        <span class="badge bg-light text-dark">@filteredDocumentCount/@processedDocumentCount Documents</span>
                    </div>
                </div>
                <div class="card-body">
                    @if (isDataLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading document data...</p>
                        </div>
                    }
                    else
                    {
                        <div class="accordion" id="documentCategories">
                            @foreach (var category in documentCategories)
                            {
                                var categoryDocuments = GetDocumentsForCategory(category.Key);
                                var filteredCategoryDocuments = categoryDocuments.Where(d => string.IsNullOrEmpty(searchTerm) || 
                                    d.FileName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                                
                                if (filteredCategoryDocuments.Any() || string.IsNullOrEmpty(searchTerm))
                                {
                                    <div class="accordion-item">
                                        <h2 class="accordion-header" id="heading-@category.Key">
                                            <button class="accordion-button @((categoryExpanded.ContainsKey(category.Key) && categoryExpanded[category.Key]) ? "" : "collapsed")" 
                                                    type="button" 
                                                    @onclick="() => ToggleCategory(category.Key)"
                                                    data-bs-toggle="collapse" 
                                                    data-bs-target="#collapse-@category.Key" 
                                                    aria-expanded="@((categoryExpanded.ContainsKey(category.Key) && categoryExpanded[category.Key]).ToString().ToLower())" 
                                                    aria-controls="collapse-@category.Key">
                                                <div class="d-flex align-items-center">
                                                    <span class="category-icon me-2">@category.Value.Icon</span>
                                                    <span class="fw-bold">@category.Value.Name</span>
                                                    <span class="badge bg-primary ms-2">@filteredCategoryDocuments.Count</span>
                                                </div>
                                            </button>
                                        </h2>
                                        <div id="collapse-@category.Key" class="accordion-collapse collapse @((categoryExpanded.ContainsKey(category.Key) && categoryExpanded[category.Key]) ? "show" : "")" 
                                             aria-labelledby="heading-@category.Key" 
                                             data-bs-parent="#documentCategories">
                                            <div class="accordion-body">
                                                @if (filteredCategoryDocuments.Any())
                                                {
                                                    <div class="table-responsive">
                                                        <table class="table table-hover">
                                                            <thead>
                                                                <tr>
                                                                    <th>Document</th>
                                                                    <th>Chunks</th>
                                                                    <th>Processed</th>
                                                                    <th>Status</th>
                                                                    <th>Actions</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @foreach (var doc in filteredCategoryDocuments)
                                                                {
                                                                    <tr>
                                                                        <td>
                                                                            <div class="d-flex align-items-center">
                                                                                <i class="bi bi-file-earmark-text me-2 text-primary"></i>
                                                                                <div>
                                                                                    <div class="fw-bold">@doc.FileName</div>
                                                                                    <small class="text-muted">@GetFileSize(doc.FileName)</small>
                                                                                </div>
                                                                            </div>
                                                                        </td>
                                                                        <td>
                                                                            <span class="badge bg-info">@doc.ChunksProcessed</span>
                                                                        </td>
                                                                        <td>
                                                                            <small>@doc.ProcessedAt</small>
                                                                        </td>
                                                                        <td>
                                                                            @if (doc.Success)
                                                                            {
                                                                                <span class="badge bg-success">Processed</span>
                                                                            }
                                                                            else
                                                                            {
                                                                                <span class="badge bg-danger" title="@doc.ErrorMessage">Failed</span>
                                                                            }
                                                                        </td>
                                                                        <td>
                                                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowDocumentDetails(doc)">
                                                                                <i class="bi bi-info-circle"></i>
                                                                            </button>
                                                                            <button class="btn btn-sm btn-outline-warning ms-1" @onclick="() => ReprocessDocument(doc)" disabled="@isProcessing">
                                                                                <i class="bi bi-arrow-repeat"></i>
                                                                            </button>
                                                                            <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => DeleteDocument(doc)" disabled="@isProcessing">
                                                                                <i class="bi bi-trash"></i>
                                                                            </button>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="text-center py-3">
                                                        <i class="bi bi-folder text-muted" style="font-size: 2rem;"></i>
                                                        <p class="mt-2 mb-0 text-muted">No documents found in this category</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Processing Progress -->
            @if (isProcessing)
            {
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">üîÑ Processing Progress</h5>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3" style="height: 25px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"
                                style="width: @progressPercentage%" aria-valuenow="@progressPercentage" aria-valuemin="0"
                                aria-valuemax="100">
                                @progressPercentage%
                            </div>
                        </div>
                        <div class="text-center">
                            <p class="mb-1">@progressMessage</p>
                            <small class="text-muted">@progressDetails</small>
                        </div>
                        @if (!string.IsNullOrEmpty(currentProcessingFile))
                        {
                            <div class="mt-3 p-3 bg-light rounded">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>Processing file:</span>
                                    <span class="fw-bold">@currentProcessingFile</span>
                                </div>
                                @if (totalFilesToProcess > 0)
                                {
                                    <div class="d-flex justify-content-between align-items-center mt-2">
                                        <span>Progress:</span>
                                        <span>@currentFileIndex of @totalFilesToProcess files</span>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Processing Complete -->
            @if (processingComplete)
            {
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">‚úÖ Processing Complete</h5>
                    </div>
                    <div class="card-body">
                        <p>Successfully processed @processedChunks document chunks and stored them in the knowledge base.</p>
                        <p>Your knowledge base is now ready for semantic search!</p>
                        <a href="/search" class="btn btn-primary">Start Searching</a>
                    </div>
                </div>
            }

            <!-- Document Details Modal -->
            @if (selectedDocument != null)
            {
                <div class="modal fade show" style="display: block;" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header bg-primary text-white">
                                <h5 class="modal-title">üìÑ @selectedDocument.FileName</h5>
                                <button type="button" class="btn-close btn-close-white" @onclick="CloseDocumentDetails"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6>Document Information</h6>
                                        <table class="table table-sm">
                                            <tr>
                                                <td><strong>Type:</strong></td>
                                                <td>@selectedDocument.DocumentType</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Chunks Processed:</strong></td>
                                                <td>@selectedDocument.ChunksProcessed</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Processing Time:</strong></td>
                                                <td>@selectedDocument.ProcessingDuration</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Processed At:</strong></td>
                                                <td>@selectedDocument.ProcessedAt</td>
                                            </tr>
                                            <tr>
                                                <td><strong>Status:</strong></td>
                                                <td>
                                                    @if (selectedDocument.Success)
                                                    {
                                                        <span class="badge bg-success">Success</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-danger">Failed</span>
                                                    }
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="col-md-6">
                                        <h6>File Information</h6>
                                        <table class="table table-sm">
                                            <tr>
                                                <td><strong>File Size:</strong></td>
                                                <td>@GetFileSize(selectedDocument.FileName)</td>
                                            </tr>
                                            <tr>
                                                <td><strong>File Path:</strong></td>
                                                <td>@GetFilePath(selectedDocument.FileName)</td>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                                @if (!selectedDocument.Success && !string.IsNullOrEmpty(selectedDocument.ErrorMessage))
                                {
                                    <div class="alert alert-warning mt-3">
                                        <h6>Error Details:</h6>
                                        <p class="mb-0">@selectedDocument.ErrorMessage</p>
                                    </div>
                                }
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseDocumentDetails">Close</button>
                                <button type="button" class="btn btn-warning" @onclick="() => ReprocessDocument(selectedDocument)" disabled="@isProcessing">
                                    @if (isProcessing && processingType == "reprocess")
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Reprocessing...</span>
                                    }
                                    else
                                    {
                                        <span>üîÑ Reprocess Document</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-backdrop fade show"></div>
            }
        </div>
    </div>
</div>

@code {
    private bool isProcessing = false;
    private bool isUploading = false;
    private bool processingComplete = false;
    private bool isDataLoading = false;
    private string processingType = "";
    private string statusMessage = "";
    private int progressPercentage = 0;
    private string progressMessage = "Ready to process";
    private string progressDetails = "";
    private int processedChunks = 0;
    private string selectedDocumentType = "transcript";
    private IBrowserFile? selectedFile;
    private string selectedUrl = "";
    private string inputUrl = "";
    private string searchTerm = "";
    
    // Processing details
    private string currentProcessingFile = "";
    private int totalFilesToProcess = 0;
    private int currentFileIndex = 0;
    
    // Document data
    private List<ProcessedDocumentInfo> allProcessedDocuments = new();
    private ProcessedDocumentInfo? selectedDocument;

    // Track expanded state of categories
    private Dictionary<string, bool> categoryExpanded = new();

    // Document categories with icons and names
    private Dictionary<string, (string Name, string Icon)> documentCategories = new()
    {
        { "pdfs", ("PDF Documents", "üìö") },
        { "transcripts", ("Transcripts", "üìù") },
        { "webpages", ("Web Pages", "üåê") }
    };

    // Computed properties
    private int processedDocumentCount => allProcessedDocuments.Count;
    private int filteredDocumentCount => string.IsNullOrEmpty(searchTerm) 
        ? allProcessedDocuments.Count 
        : allProcessedDocuments.Count(d => d.FileName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Documents page initialized");
        // Initialize category expanded state
        foreach (var category in documentCategories.Keys)
        {
            categoryExpanded[category] = false;
        }
        await LoadProcessingData();
    }

    private async Task LoadProcessingData()
    {
        isDataLoading = true;
        StateHasChanged();
        
        try
        {
            // Load all processed documents
            var allDocsResponse = await ApiService.GetProcessedDocumentsAsync();
            if (allDocsResponse.Success && allDocsResponse.Data != null)
            {
                allProcessedDocuments = allDocsResponse.Data.ProcessedFiles.ToList();
                Logger.LogInformation($"Loaded {allProcessedDocuments.Count} processed documents");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading processing data");
            statusMessage = "Warning: Could not load processing history data.";
        }
        finally
        {
            isDataLoading = false;
            StateHasChanged();
        }
    }

    private List<ProcessedDocumentInfo> GetDocumentsForCategory(string category)
    {
        if (category == "pdfs")
        {
            // Return all PDF documents
            return allProcessedDocuments
                .Where(d => d.DocumentType == "PDF")
                .ToList();
        }

        if (category == "transcripts")
        {
            return allProcessedDocuments
                .Where(d => d.DocumentType == "Transcript")
                .ToList();
        }

        if (category == "webpages")
        {
            return allProcessedDocuments
                .Where(d => d.DocumentType == "WebPage")
                .ToList();
        }

        // Return empty list for any other categories
        return new List<ProcessedDocumentInfo>();
    }

    private async Task ProcessAllDocuments()
    {
        Logger.LogInformation("Starting processing of all documents");
        await ProcessDocuments("all");
    }

    private async Task ProcessNewDocuments()
    {
        Logger.LogInformation("Starting processing of new documents");
        processingType = "new";
        isProcessing = true;
        processingComplete = false;
        progressPercentage = 0;
        progressMessage = "Starting new document processing...";
        progressDetails = "Scanning for new documents to process";
        currentProcessingFile = "";
        totalFilesToProcess = 0;
        currentFileIndex = 0;
        processedChunks = 0;
        statusMessage = "";
        
        StateHasChanged(); // Update UI immediately

        try
        {
            Logger.LogInformation("Calling API to process new documents");
            progressMessage = "Processing new documents...";
            progressDetails = "This may take several minutes depending on the number and size of documents";
            StateHasChanged();
            
            var response = await ApiService.ProcessNewDocumentsAsync();
            Logger.LogInformation("Received API response for new document processing");

            if (response.Success && response.Data != null)
            {
                processedChunks = response.Data.ChunksProcessed;
                processingComplete = true;
                statusMessage = response.Data.Message;
                progressMessage = "Processing complete!";
                progressDetails = $"Processed {processedChunks} new document chunks";
                currentProcessingFile = "";
                progressPercentage = 100;
                Logger.LogInformation($"New document processing completed successfully. Processed {processedChunks} chunks");

                // Reload the processing data to reflect new state
                await LoadProcessingData();
            }
            else
            {
                statusMessage = $"Error: {response.Error}";
                progressMessage = "Processing failed";
                progressDetails = response.Error;
                Logger.LogWarning("New document processing failed: {0}", response.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            progressMessage = "Processing failed";
            progressDetails = ex.Message;
            Logger.LogError(ex, "Unexpected error during new document processing");
        }
        finally
        {
            isProcessing = false;
            processingType = "";
            StateHasChanged();
        }
    }

    private async Task ProcessDocuments(string type)
    {
        processingType = type;
        isProcessing = true;
        processingComplete = false;
        progressPercentage = 0;
        progressMessage = $"Starting {type} document processing...";
        progressDetails = "Scanning documents to process";
        currentProcessingFile = "";
        totalFilesToProcess = 0;
        currentFileIndex = 0;
        processedChunks = 0;
        statusMessage = "";
        
        StateHasChanged(); // Update UI immediately

        try
        {
            Logger.LogInformation("Calling API to process documents");
            progressMessage = $"Processing {type} documents...";
            progressDetails = "This may take several minutes depending on the number and size of documents";
            StateHasChanged();
            
            var response = await ApiService.ProcessDocumentsAsync();
            Logger.LogInformation("Received API response for document processing");

            if (response.Success && response.Data != null)
            {
                processedChunks = response.Data.ChunksProcessed;
                processingComplete = true;
                statusMessage = response.Data.Message;
                progressMessage = "Processing complete!";
                progressDetails = $"Processed {processedChunks} document chunks";
                currentProcessingFile = "";
                progressPercentage = 100;
                Logger.LogInformation($"Document processing completed successfully. Processed {processedChunks} chunks");

                // Reload the processing data to reflect new state
                await LoadProcessingData();
            }
            else
            {
                statusMessage = $"Error: {response.Error}";
                progressMessage = "Processing failed";
                progressDetails = response.Error;
                Logger.LogWarning("Document processing failed: {0}", response.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            progressMessage = "Processing failed";
            progressDetails = ex.Message;
            Logger.LogError(ex, "Unexpected error during document processing");
        }
        finally
        {
            isProcessing = false;
            processingType = "";
            StateHasChanged();
        }
    }

    private async Task ReprocessDocument(ProcessedDocumentInfo document)
    {
        Logger.LogInformation("Starting reprocessing of document: {0}", document.FileName);
        processingType = "reprocess";
        isProcessing = true;
        progressMessage = $"Reprocessing document...";
        progressDetails = $"File: {document.FileName}";
        StateHasChanged();

        try
        {
            // For now, we'll just call the same API endpoint
            // In a more advanced implementation, we would implement a specific reprocessing endpoint
            var response = await ApiService.ProcessDocumentsAsync();
            
            if (response.Success && response.Data != null)
            {
                statusMessage = $"‚úÖ Successfully reprocessed document";
                Logger.LogInformation("Document reprocessing completed successfully");
                // Reload data to show updated status
                await LoadProcessingData();
            }
            else
            {
                statusMessage = $"Error reprocessing document: {response.Error}";
                Logger.LogWarning("Document reprocessing failed: {0}", response.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error reprocessing document: {ex.Message}";
            Logger.LogError(ex, "Unexpected error during document reprocessing");
        }
        finally
        {
            isProcessing = false;
            processingType = "";
            StateHasChanged();
        }
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task FetchUrl()
    {
        isUploading = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            Logger.LogInformation("Starting URL processing for {0}", inputUrl);

            if (string.IsNullOrWhiteSpace(inputUrl))
            {
                Logger.LogWarning("Attempted to process empty URL");
                statusMessage = "Error: Please enter a valid URL";
                return;
            }

            // Validate URL format
            if (!Uri.TryCreate(inputUrl, UriKind.Absolute, out var uri) ||
                (uri.Scheme != Uri.UriSchemeHttp && uri.Scheme != Uri.UriSchemeHttps))
            {
                Logger.LogWarning("Invalid URL format: {0}", inputUrl);
                statusMessage = "Error: Please enter a valid HTTP or HTTPS URL";
                return;
            }

            // Call the API to fetch and process the URL
            var response = await ApiService.FetchUrlAsync(inputUrl);

            if (response.Success && response.Data != null)
            {
                statusMessage = $"‚úÖ {response.Data.Message}";
                Logger.LogInformation("URL processing completed successfully. Processed {0} chunks", response.Data.ChunksProcessed);
                inputUrl = ""; // Clear the URL input

                // Reload processing data to include the new document
                await LoadProcessingData();
            }
            else
            {
                statusMessage = $"Error processing URL: {response.Error}";
                Logger.LogWarning("URL processing failed: {0}", response.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error processing URL");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task UploadDocument()
    {
        isUploading = true;
        statusMessage = "";
        StateHasChanged();

        try
        {
            if (selectedDocumentType == "webpage")
            {
                // Handle URL processing
                Logger.LogInformation("Starting URL processing for {0}", selectedUrl);

                if (string.IsNullOrWhiteSpace(selectedUrl))
                {
                    Logger.LogWarning("Attempted to process empty URL");
                    statusMessage = "Error: Please enter a valid URL";
                    return;
                }

                // Validate URL format
                if (!Uri.TryCreate(selectedUrl, UriKind.Absolute, out var uri) ||
                    (uri.Scheme != Uri.UriSchemeHttp && uri.Scheme != Uri.UriSchemeHttps))
                {
                    Logger.LogWarning("Invalid URL format: {0}", selectedUrl);
                    statusMessage = "Error: Please enter a valid HTTP or HTTPS URL";
                    return;
                }

                // Call the API to fetch and process the URL
                var response = await ApiService.FetchUrlAsync(selectedUrl);

                if (response.Success && response.Data != null)
                {
                    statusMessage = $"‚úÖ {response.Data.Message}";
                    Logger.LogInformation("URL processing completed successfully. Processed {0} chunks", response.Data.ChunksProcessed);
                    selectedUrl = ""; // Clear the URL input

                    // Reload processing data to include the new document
                    await LoadProcessingData();
                }
                else
                {
                    statusMessage = $"Error processing URL: {response.Error}";
                    Logger.LogWarning("URL processing failed: {0}", response.Error);
                }
            }
            else
            {
                // Handle file upload
                Logger.LogInformation("Starting document upload for {0}", selectedFile?.Name);
                if (selectedFile == null)
                {
                    Logger.LogWarning("Attempted to upload null file");
                    statusMessage = "Error: Please select a file to upload";
                    return;
                }

                Logger.LogInformation("Selected file: {0} ({1} bytes)", selectedFile.Name, selectedFile.Size);

                // Read the file content
                using var stream = selectedFile.OpenReadStream(10_000_000); // 10MB limit
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var fileContent = memoryStream.ToArray();

                // Call the API to upload and process the document
                var response = await ApiService.UploadDocumentAsync(selectedFile.Name, selectedDocumentType, fileContent);

                if (response.Success && response.Data != null)
                {
                    statusMessage = $"‚úÖ {response.Data.Message}";
                    Logger.LogInformation("Document upload completed successfully. Processed {0} chunks", response.Data.ChunksProcessed);
                    selectedFile = null;

                    // Reload processing data to include the new document
                    await LoadProcessingData();
                }
                else
                {
                    statusMessage = $"Error uploading document: {response.Error}";
                    Logger.LogWarning("Document upload failed: {0}", response.Error);
                }
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error processing document/URL");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadProcessingData();
    }

    private void ToggleCategory(string categoryKey)
    {
        // Toggle the expanded state for this category
        if (categoryExpanded.ContainsKey(categoryKey))
        {
            categoryExpanded[categoryKey] = !categoryExpanded[categoryKey];
        }
        else
        {
            categoryExpanded[categoryKey] = true;
        }
        StateHasChanged();
    }

    private void ShowDocumentDetails(ProcessedDocumentInfo document)
    {
        selectedDocument = document;
    }

    private void CloseDocumentDetails()
    {
        selectedDocument = null;
    }

    private async Task DeleteDocument(ProcessedDocumentInfo document)
    {
        // Confirm deletion
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{document.FileName}'? This will remove all its embeddings from the knowledge base.");
        if (!confirm) return;

        Logger.LogInformation("Deleting document: {0}", document.FileName);
        statusMessage = $"Deleting document {document.FileName}...";
        StateHasChanged();

        try
        {
            var response = await ApiService.DeleteDocumentAsync(document.FileName);
            
            if (response.Success)
            {
                statusMessage = $"‚úÖ {response.Data}";
                Logger.LogInformation("Document deleted successfully: {0}", document.FileName);
                
                // Reload processing data to reflect the deletion
                await LoadProcessingData();
            }
            else
            {
                statusMessage = $"Error deleting document: {response.Error}";
                Logger.LogError("Error deleting document: {0}", response.Error);
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error deleting document: {ex.Message}";
            Logger.LogError(ex, "Unexpected error during document deletion");
        }
    }

    private string GetFileSize(string fileName)
    {
        // In a real implementation, we would get the actual file size
        // For now, we'll return a placeholder
        return "Unknown size";
    }

    private string GetFilePath(string fileName)
    {
        // Determine the file path based on the document type
        if (fileName.EndsWith(".txt"))
            return $"data/transcripts/{fileName}";
        if (fileName.EndsWith(".pdf"))
            return $"data/pdfs/{fileName}";
        
        // For web pages and other types
        return $"data/webpages/{fileName}";
    }
}
